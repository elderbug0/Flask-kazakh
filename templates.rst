.. currentmodule:: flask

Templates
=========

Сіз қолданбаңыз үшін аутентификация көріністерін жаздыңыз, бірақ серверді іске қосып, кез келген URL мекенжайына өтуге тырыссаңыз, ``TemplateNotFound`` қатесін көресіз. Себебі көріністер :func:`render_template` деп аталады, бірақ сіз әлі templates файлдарын жазған жоқсыз. Templates файлдары ``flaskr`` бумасындағы ``templates`` каталогында сақталады.

Templates – динамикалық деректерге арналған толтырғыштармен қатар статикалық деректерді қамтитын файлдар. Templates соңғы құжатты жасау үшін нақты деректермен көрсетіледі. Flask Templates файлдарын көрсету үшін `Jinja`_ үлгі кітапханасын пайдаланады.

Сіздің қолданбаңызда HTML-ді көрсету үшін шаблондарды қолданасыз. HTML пайдаланушының браузерінде көрсетіледі. Flask-те Jinja HTML шаблондарында көрсетілген деректерді авто-түйіндеу ретінде теңшеуге бапталған. Бұл демек, пайдаланушы енгізген деректерді көрсету қауіпсіз; HTML-ге әсер ететін немесе бұза алатын таңбалар, мысалы, ``<``  және ``>`` түйінделеді және браузерде бірдей көрінетін, бірақ күтпеген нәтижелерге әкелмейтін қауіпсіз мәндермен алмастырылады.

Jinja  негізінен Python сияқты көрінеді және өзін ұстайды. Jinja  синтаксисін үлгідегі статикалық деректерден ажырату үшін арнайы бөлгіштер пайдаланылады. ``{{`` және ``}}`` арасындағы кез келген нәрсе соңғы құжатқа шығарылатын өрнек болып табылады. ``{%`` және ``%}`` ``if`` және ``for`` сияқты басқару ағынының мәлімдемесін білдіреді. Python-дан айырмашылығы, блоктар шегініспен емес, бастапқы және аяқталу тегтерімен белгіленеді, өйткені блоктағы статикалық мәтін шегіністерді өзгертуі мүмкін.

.. _Jinja: https://jinja.palletsprojects.com/templates/
.. _HTML: https://developer.mozilla.org/docs/Web/HTML


Негізгі орналасу
---------------

Қолданбаның әрбір бетінде, басқа дененің айналасында бірдей орналасу болады. Барлық HTML құрылымын жазудың орнына, әрбір templates, негізгі үлгіні *кеңейтеді* және нақты бөлімдерді қайта анықтайды.

.. code-block:: html+jinja
    :caption: ``flaskr/templates/base.html``

    <!doctype html>
    <title>{% block title %}{% endblock %} - Flaskr</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <nav>
      <h1>Flaskr</h1>
      <ul>
        {% if g.user %}
          <li><span>{{ g.user['username'] }}</span>
          <li><a href="{{ url_for('auth.logout') }}">Log Out</a>
        {% else %}
          <li><a href="{{ url_for('auth.register') }}">Register</a>
          <li><a href="{{ url_for('auth.login') }}">Log In</a>
        {% endif %}
      </ul>
    </nav>
    <section class="content">
      <header>
        {% block header %}{% endblock %}
      </header>
      {% for message in get_flashed_messages() %}
        <div class="flash">{{ message }}</div>
      {% endfor %}
      {% block content %}{% endblock %}
    </section>

:data:`g` үлгілерде автоматты түрде қолжетімді. Егер негізінде
``g.user`` және  (``load_logged_in_user`` ішінен), не пайдаланушы аты және жүйеден шығу сілтемесі көрсетіледі немесе тіркелу және жүйеге кіру сілтемелері көрсетіледі. :func:`url_for` да автоматты түрде қол жетімді және қолмен жазудың орнына көріністерге URL мекенжайларын жасау үшін пайдаланылады.

Бет тақырыбынан кейін және мазмұнның алдында үлгі :func:`get_flashed_messages` арқылы қайтарылған әрбір хабардың үстінен айналдырады. Қате туралы хабарларды көрсету үшін көріністерде :func:`flash` қолдандыңыз және бұл код оларды көрсетеді.

Мұнда басқа үлгілерде қайта анықталатын үш блок көрсетілген:

#. ``{% block content %}`` файлда көрсетілген тақырыпты өзгертеді
шолғыш қойындысы мен терезе тақырыбы.

#. ``{% block content %}`` ``тақырып``-ға ұқсас, бірақ бетте көрсетілген тақырыпты өзгертеді.

#. ``{% block content %}`` - кіру пішіні немесе блог жазбасы сияқты әрбір беттің мазмұны өтетін орын.

Негізгі үлгі тікелей ``templates`` каталогында болады. Қалғандарын ретке келтіру үшін сызба үлгілері, сызбамен бірдей атаумен каталогқа орналастырылады.


Тіркелу
--------

.. code-block:: html+jinja
    :caption: ``flaskr/templates/auth/register.html``

    {% extends 'base.html' %}

    {% block header %}
      <h1>{% block title %}Register{% endblock %}</h1>
    {% endblock %}

    {% block content %}
      <form method="post">
        <label for="username">Username</label>
        <input name="username" id="username" required>
        <label for="password">Password</label>
        <input type="password" name="password" id="password" required>
        <input type="submit" value="Register">
      </form>
    {% endblock %}

Register ``{% extensions 'base.html' %}`` Jinja-ға бұл үлгі негізгі үлгідегі блоктарды ауыстыру керектігін айтады. Барлық көрсетілген мазмұн негізгі үлгідегі блоктарды қайта анықтайтын ``{% block %}`` тегтерінің ішінде болуы керек.

Бұл жерде қолданылған пайдалы үлгі ``{% block title %}``-ді ``{% block header %}`` ішіне орналастыру. Бұл тақырыптың блогын орнатады, содан кейін оны бас жолағының блогына шығарады, сондықтан , оны екі рет жазбай отырып, терезе мен беті бірдей тақырыпты қолданады.

``input`` тегтері осы жерде ``required`` атрибутын қолданады. Бұл браузерге осы өрістер толтырылмайынша пішінді жібермеу керек екендігін айтады. Егер пайдаланушы осы атрибутқа қолдау көрсетпейтін ескі браузерді немесе браузерден басқа нәрсені қолданса, сіз де Flask көрінісінде деректерді тексеруге қаласыз. Серверде деректерді толық тексеру әрқашан маңызды, клиентте де тексеру бар болса да.

Кіру
------

Бұл тақырып пен жіберу түймешігінен басқа тіркелу шаблонымен бірдей.

.. code-block:: html+jinja
    :caption: ``flaskr/templates/auth/login.html``

    {% extends 'base.html' %}

    {% block header %}
      <h1>{% block title %}Log In{% endblock %}</h1>
    {% endblock %}

    {% block content %}
      <form method="post">
        <label for="username">Username</label>
        <input name="username" id="username" required>
        <label for="password">Password</label>
        <input type="password" name="password" id="password" required>
        <input type="submit" value="Log In">
      </form>
    {% endblock %}


Пайдаланушыys тіркеу
---------------

Аутентификация шаблондары жазылғаннан кейін, сіз пайдаланушыны тіркей аласыз. Сервер жұмыс істеп тұрғанына көз жеткізіңіз (жоқ болса, ``flask run``), содан кейін http://127.0.0.1:5000/auth/register ке өтіңіз.

Пішінді толтырмай, “Тіркелу” түймешігін басып көріңіз және браузердің қате хабарламасын көріңіз. ``register.html`` шаблонынан ``required`` атрибуттарын алып тастаңыз да, “Тіркелу” түймешігін қайта басыңыз. Браузер қате көрсетпей, бет қайта жүктеледі және көріністегі :func:`flash` функциясының қатесі көрсетіледі.

Пайдаланушы аты мен құпия сөзді енгізіңіз. Дұрыс емес пайдаланушы атын немесе дұрыс пайдаланушы аты мен дұрыс емес құпия сөзді енгізуден байланыстырып көріңіз. Егер сіз кірсеңіз, әлде қашан index көрініске айдату мүмкін емес деген, қате аласыз.

:doc:`static` - не өтіңіз.
